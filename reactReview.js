// 재사용성, 다른 라이브러리(프레임워크)보다 성능상 좋음
//  --> 유연하다
// 생태계 구성이 매우 좋음

// React의 원칙
// 1. 선언적 프로그래밍 : 구성과 업데이트가 아닌 어떻게 보여져야하는지를 설명하는 코드를 작성하도록 유도
//                          --> 어플리케이션의 상태와 동작을 이해하기 쉽게 만들어서 디버깅, 유지보수 간소화
// 2. 컴포넌트 기반 구조 : 모듈화, 재사용성 고려
// 3. 단방향 데이터 흐름 : 상태관리의 단순화

// npm : node package manager
//  --> node 관련 모드 패키지들을 관리(온라인 데이터베이스)
//  --> npm이 느리고 성능 및 속도 안정성을 강화한 패키지 매니저가 yarn
// npm install -g yarn
// yarn create react-app <프로젝트 이름>
// 실행 : yarn start

// 챗봇 만들기 - 서버 구축은 준비되어있는 내용으로 진행
// BE : Django(REST) Framework
// React : 그동안 배운 내용들 복습도 하고 직접 화면도 구축
// next.js : React에서 성능 최적화와 SEO 강화를 위해 SSR, CSR