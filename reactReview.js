// 재사용성, 다른 라이브러리(프레임워크)보다 성능상 좋음
//  --> 유연하다
// 생태계 구성이 매우 좋음

// React의 원칙
// 1. 선언적 프로그래밍 : 구성과 업데이트가 아닌 어떻게 보여져야하는지를 설명하는 코드를 작성하도록 유도
//                          --> 어플리케이션의 상태와 동작을 이해하기 쉽게 만들어서 디버깅, 유지보수 간소화
// 2. 컴포넌트 기반 구조 : 모듈화, 재사용성 고려
// 3. 단방향 데이터 흐름 : 상태관리의 단순화

// npm : node package manager
//  --> node 관련 모드 패키지들을 관리(온라인 데이터베이스)
//  --> npm이 느리고 성능 및 속도 안정성을 강화한 패키지 매니저가 yarn
// npm install -g yarn
// yarn create react-app <프로젝트 이름>
// 실행 : yarn start

// 챗봇 만들기 - 서버 구축은 준비되어있는 내용으로 진행
// BE : Django(REST) Framework
// React : 그동안 배운 내용들 복습도 하고 직접 화면도 구축
// next.js : React에서 성능 최적화와 SEO 강화를 위해 SSR, CSR

// React와 구성요소 기반 아케텍처
// 1. React가 개발자들에게 원하는 것
//  --> UI를 독립적, 재사용 가능하도록 구성하는 것을 유도

// 구성요소 기반 접근 방식의 장점
//  --> 모듈성, 재사용성, 캡슐화

// React 주요 도구
// 1. Virtual DOM : 직접적인 DOM 조작을 최소화 하기위해 나온 개념
//      --> 대량의 데이터를 처리할 때도 UI가 반응적인 상태를 유지할 수 있음(SPA)
//      --> RealDOM의 인메모리 표현
//      --> 업데이트 진행 후 RealDOM에 최소한의 변경사항만 적용
// 2. JSX
// 3. 상태 관리 : 사용자의 입력처리, 데이터 로딩, 시스템(어플리케이션)의 상태 변경에 따른 사용자 인터페이스 업데이트를 더 쉽게 처리하도록 지원
// 4. 라이프사이클 : 구성요소의 생성부터 소멸까지의 다양한 단계를 제어(Hooks)
// 5. 다양한 개발자 도구 :

// App 이름의 컴포넌트를 정의하고 name 변수를 사용 --> 선언적으로 UI에 랜더링
// UI를 랜더링하는 파트에서 HTML과 JavaScript를 조합하여 UI를 작성한다
// 코드에서 변수들의 값은 동적으로 사용된다
//  --> 컴포넌트 내부에서 선언하여 UI에 동적으로 적용
//  --> React에서 해당 state를 자동으로 업데이트하고 관리하도록 진행하는 방식
// function App() {
// 컴포넌트 객체들의 값이나 그 외의 내용들을 선언
// const name = "승엽";

// 컴포넌트 내부 메서드들 선언 및 구현

// 실질적인 UI가 구성되는 곳
//   return (
//     <>
//       <h1>안녕! {name}</h1>
//     </>
//   );
// }

// export default App;
